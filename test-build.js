// Script para testar se o m√≥dulo est√° funcionando
import BLEPeripheral from './BLEPeripheral.js';

console.log('üß™ Testando BLE Peripheral...');

// Teste 1: Verificar se o m√≥dulo est√° dispon√≠vel
console.log('1. Verificando m√≥dulo...');
if (!BLEPeripheral) {
  console.error('‚ùå BLEPeripheral n√£o est√° dispon√≠vel');
  process.exit(1);
}
console.log('‚úÖ BLEPeripheral est√° dispon√≠vel');

// Teste 2: Verificar m√©todos
console.log('2. Verificando m√©todos...');
const methods = [
  'setName',
  'isAdvertising',
  'addService',
  'addCharacteristicToService',
  'start',
  'stop',
  'sendNotificationToDevices',
  'addListener',
  'removeListener',
  'removeAllListeners'
];

let allMethodsAvailable = true;
methods.forEach(method => {
  if (typeof BLEPeripheral[method] === 'function') {
    console.log(`‚úÖ ${method} est√° dispon√≠vel`);
  } else {
    console.log(`‚ùå ${method} N√ÉO est√° dispon√≠vel`);
    allMethodsAvailable = false;
  }
});

if (!allMethodsAvailable) {
  console.error('‚ùå Alguns m√©todos n√£o est√£o dispon√≠veis');
  process.exit(1);
}

// Teste 3: Verificar tipos de retorno
console.log('3. Verificando tipos de retorno...');
try {
  const isAdvertisingPromise = BLEPeripheral.isAdvertising();
  if (isAdvertisingPromise && typeof isAdvertisingPromise.then === 'function') {
    console.log('‚úÖ isAdvertising retorna Promise');
  } else {
    console.log('‚ùå isAdvertising n√£o retorna Promise');
  }
} catch (error) {
  console.log('‚ùå Erro ao testar isAdvertising:', error.message);
}

console.log('üéâ Todos os testes passaram! BLE Peripheral est√° funcionando corretamente.');
